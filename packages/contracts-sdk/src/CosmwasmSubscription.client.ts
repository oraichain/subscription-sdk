/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {AdminExecuteMsg, Uint128, DurationUnit, PaymentOption, Coin, SubscriptionDuration, SubscriptionOptionRecord} from "./types";
import {InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, SubscriptionOptionsResponse, SubscriptionStatusResponse} from "./CosmwasmSubscription.types";
export interface CosmwasmSubscriptionReadOnlyInterface {
  contractAddress: string;
  subscriptionOptions: () => Promise<SubscriptionOptionsResponse>;
  subscriptionStatus: ({
    addr
  }: {
    addr: string;
  }) => Promise<SubscriptionStatusResponse>;
}
export class CosmwasmSubscriptionQueryClient implements CosmwasmSubscriptionReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.subscriptionOptions = this.subscriptionOptions.bind(this);
    this.subscriptionStatus = this.subscriptionStatus.bind(this);
  }

  subscriptionOptions = async (): Promise<SubscriptionOptionsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      subscription_options: {}
    });
  };
  subscriptionStatus = async ({
    addr
  }: {
    addr: string;
  }): Promise<SubscriptionStatusResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      subscription_status: {
        addr
      }
    });
  };
}
export interface CosmwasmSubscriptionInterface extends CosmwasmSubscriptionReadOnlyInterface {
  contractAddress: string;
  sender: string;
  subscribe: ({
    idSubscription
  }: {
    idSubscription: number;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  admin: (adminExecuteMsg: AdminExecuteMsg, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class CosmwasmSubscriptionClient extends CosmwasmSubscriptionQueryClient implements CosmwasmSubscriptionInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.subscribe = this.subscribe.bind(this);
    this.admin = this.admin.bind(this);
  }

  subscribe = async ({
    idSubscription
  }: {
    idSubscription: number;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      subscribe: {
        id_subscription: idSubscription
      }
    }, _fee, _memo, _funds);
  };
  admin = async (adminExecuteMsg: AdminExecuteMsg, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      admin: adminExecuteMsg
    }, _fee, _memo, _funds);
  };
}